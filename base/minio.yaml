---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "1"
type: Opaque
stringData:
  minio_root_user: minio
  minio_root_password: minio123
  AWS_ACCESS_KEY_ID: minio
  AWS_SECRET_ACCESS_KEY: minio123
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeMode: Filesystem
  storageClassName: nfs-csi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc
      containers:
        - name: minio
          image: quay.io/minio/minio:latest
          imagePullPolicy: IfNotPresent
          args:
            - server
            - /data
            - --console-address
            - :9090
          ports:
            - containerPort: 9000
            - containerPort: 9090
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: minio_root_user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: minio_root_password
          volumeMounts:
            - name: data
              mountPath: /data
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: ui
      protocol: TCP
      port: 9090
      targetPort: 9090
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-api
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  to:
    kind: Service
    name: minio-service
    weight: 100
  port:
    targetPort: api
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: minio-ui
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  to:
    kind: Service
    name: minio-service
    weight: 100
  port:
    targetPort: ui
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-minio-bucket
  namespace: ml
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: create-bucket
          image: quay.io/minio/mc:latest
          env:
            - name: MINIO_ENDPOINT
              value: http://minio-service:9000
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: minio_root_user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: minio_root_password
            - name: MC_CONFIG_DIR
              value: /tmp/.mc
          command:
            - /bin/sh
            - -c
            - |
              echo "⏳ Waiting for MinIO to be ready..."
              until mc alias set myminio $MINIO_ENDPOINT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD 2>/dev/null; do
                echo "Waiting..."
                sleep 3
              done
              echo "✅ Creating buckets..."
              mc mb myminio/ml-workbench || echo "Bucket already exists"
              mc mb myminio/mlpipeline-artifacts || echo "Bucket already exists"
              mc ls myminio

