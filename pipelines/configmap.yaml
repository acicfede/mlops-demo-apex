apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-files-configmap
  namespace: ml
data:
  Part1-Data-Cleaning.ipynb: |
    {
     "cells": [
      {
       "cell_type": "code",
       "execution_count": 2,
       "id": "f8f7f203-f86b-4e75-a505-899b0aeb0cf5",
       "metadata": {"tags": []},
       "outputs": [],
       "source": [
        "!pip install -q --upgrade pip\n",
        "!pip install -q requests bs4 "
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "id": "971f6ad8-a173-40b5-8e10-de0a3e71b279",
       "metadata": {"tags": []},
       "outputs": [],
       "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "def getLastModifiedTime(url):\n",
        "    response = requests.head(url)\n",
        "    if 'Last-Modified' in response.headers:\n",
        "        return response.headers['Last-Modified']\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "def get_url_paths(url, ext='', params={}):\n",
        "    response = requests.get(url, params=params)\n",
        "    if response.ok:\n",
        "        response_text = response.text\n",
        "    else:\n",
        "        return response.raise_for_status()\n",
        "    soup = BeautifulSoup(response_text, 'html.parser')\n",
        "    parent = [url + node.get('href') for node in soup.find_all('a') if node.get('href').endswith(ext)]\n",
        "    return parent\n",
        "\n",
        "def is_within_hour(last_modified_time, hr):\n",
        "    last_modified_datetime = datetime.strptime(last_modified_time, '%a, %d %b %Y %H:%M:%S %Z')\n",
        "    time_difference = datetime.utcnow() - last_modified_datetime\n",
        "    return time_difference < timedelta(hours=hr)"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 8,
       "id": "94ed4fed-21e3-438c-8052-2f58f0c7a7d7",
       "metadata": {"tags": []},
       "outputs": [],
       "source": [
        "pdf_folder_path = \"infohub\"\n",
        "url = \"http://http-port-fileserver.apps.privateailab.acic.accenture/pdf/demo/demo/\"\n",
        "files_to_embed = []\n",
        "updated_file_lookup_hours = 1"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 9,
       "id": "d39f7513-d1cd-46d3-80cd-599137002804",
       "metadata": {"tags": []},
       "outputs": [],
       "source": [
        "result = get_url_paths(url, \"pdf\")\n",
        "modified_pdf_list = '/data/modified_pdf_list.txt'"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 10,
       "id": "25cd3498-f183-4795-866a-a4b40ef2d3c3",
       "metadata": {"tags": []},
       "outputs": [],
       "source": [
        "import os\n",
        "os.makedirs('/data', exist_ok=True)\n",
        "\n",
        "for pdf_url in result:\n",
        "    last_modified_time = getLastModifiedTime(pdf_url)\n",
        "    if last_modified_time is not None and is_within_hour(last_modified_time, updated_file_lookup_hours):\n",
        "        filename = pdf_url.split('/')[-1]\n",
        "        files_to_embed.append(filename)\n",
        "        print(filename + \" has been stored in\" + modified_pdf_list)\n",
        "\n",
        "with open(modified_pdf_list, 'w') as file:\n",
        "    for item in files_to_embed:\n",
        "        file.write(\"%s\\n\" % item)"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3.11",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "name": "python",
       "version": "3.11.9"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 5
    }
